@model StarEvents.Models.ViewModels.EventCreateViewModel

@{
    ViewBag.Title = Model.EventId == 0 ? "Create Event" : "Edit Event";
}

<div class="container my-4">
    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm(Model.EventId == 0 ? "CreateEvent" : "EditEvent", "Organizer", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.EventId)

        <div class="mb-3">
            @Html.LabelFor(m => m.EventName)
            @Html.TextBoxFor(m => m.EventName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.EventName)
        </div>

        <div class="mb-3">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, 6, 80, new { @class = "form-control" })
        </div>

        <div class="row g-2 mb-3">
            <div class="col-md-4">
                @Html.LabelFor(m => m.EventDate)
                @Html.TextBoxFor(m => m.EventDate, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", type = "datetime-local" })
            </div>

            <div class="col-md-4">
                @Html.Label("Select Venue")
                @Html.DropDownListFor(m => m.VenueId,
                                   new SelectList(Model.AvailableVenues, "Value", "Text", Model.VenueId),
                                   "-- Select venue --", new { @class = "form-control" })
            </div>
        </div>

        <div class="mt-3 mb-4">
            <h5>Ticket Types</h5>
            <table class="table table-sm" id="ticketTypesTable">
                <thead>
                    <tr><th>Type</th><th>Price</th><th>Qty</th><th>Description</th><th>Action</th></tr>
                </thead>
                <tbody>
                    @{
                        if (Model.TicketTypes != null && Model.TicketTypes.Any())
                        {
                            for (int i = 0; i < Model.TicketTypes.Count; i++)
                            {
                                <tr>
                                    <td>@Html.TextBoxFor(m => m.TicketTypes[i].TypeName, new { @class = "form-control" })</td>
                                    <td>@Html.TextBoxFor(m => m.TicketTypes[i].Price, new { @class = "form-control", type = "number", step = "0.01" })</td>
                                    <td>@Html.TextBoxFor(m => m.TicketTypes[i].AvailableQuantity, new { @class = "form-control", type = "number", min = "0" })</td>
                                    <td>@Html.TextBoxFor(m => m.TicketTypes[i].Description, new { @class = "form-control" })</td>
                                    <td><button type="button" class="btn btn-sm btn-danger remove-ticket">Remove</button></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td><input name="TicketTypes[0].TypeName" class="form-control" /></td>
                                <td><input name="TicketTypes[0].Price" class="form-control" type="number" step="0.01" /></td>
                                <td><input name="TicketTypes[0].AvailableQuantity" class="form-control" type="number" min="0" /></td>
                                <td><input name="TicketTypes[0].Description" class="form-control" /></td>
                                <td><button type="button" class="btn btn-sm btn-danger remove-ticket">Remove</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <button type="button" id="addTicketType" class="btn btn-sm btn-primary">Add Ticket Type</button>
        </div>

        <div class="mt-3 mb-4">
            <h5>Discounts</h5>
            <table class="table table-sm" id="discountsTable">
                <thead><tr><th>Code</th><th>Pct</th><th>Max</th><th>From</th><th>To</th><th>Action</th></tr></thead>
                <tbody>
                    @{
                        if (Model.Discounts != null && Model.Discounts.Any())
                        {
                            for (int i = 0; i < Model.Discounts.Count; i++)
                            {
                                <tr>
                                    <td>@Html.TextBoxFor(m => m.Discounts[i].DiscountCode, new { @class = "form-control" })</td>
                                    <td>@Html.TextBoxFor(m => m.Discounts[i].DiscountPercentage, new { @class = "form-control", type = "number", step = "0.01" })</td>
                                    <td>@Html.TextBoxFor(m => m.Discounts[i].MaxDiscountAmount, new { @class = "form-control", type = "number", step = "0.01" })</td>
                                    <td>@Html.TextBoxFor(m => m.Discounts[i].ValidFrom, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })</td>
                                    <td>@Html.TextBoxFor(m => m.Discounts[i].ValidTo, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })</td>
                                    <td><button type="button" class="btn btn-sm btn-danger remove-discount">Remove</button></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td><input name="Discounts[0].DiscountCode" class="form-control" /></td>
                                <td><input name="Discounts[0].DiscountPercentage" class="form-control" type="number" step="0.01" /></td>
                                <td><input name="Discounts[0].MaxDiscountAmount" class="form-control" type="number" step="0.01" /></td>
                                <td><input name="Discounts[0].ValidFrom" class="form-control" type="date" /></td>
                                <td><input name="Discounts[0].ValidTo" class="form-control" type="date" /></td>
                                <td><button type="button" class="btn btn-sm btn-danger remove-discount">Remove</button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <button type="button" id="addDiscount" class="btn btn-sm btn-primary">Add Discount</button>
        </div>

        <div class="form-check mt-2 mb-3">
            @Html.CheckBoxFor(m => m.IsPublished, new { @class = "form-check-input" })
            @Html.LabelFor(m => m.IsPublished, new { @class = "form-check-label" })
        </div>

        <div class="mt-3">
            <button class="btn btn-success" type="submit">Save</button>
            <a class="btn btn-link" href="@Url.Action("MyEvents","Organizer")">Back</a>
        </div>
    }

</div>

@section Scripts {
    <script>
        // Vanilla JS dynamic rows + reindex for ASP.NET MVC model binding
        (function () {
            function reindexRows(tableSelector) {
                var table = document.querySelector(tableSelector);
                if (!table) return;
                var rows = table.tBodies[0].rows;
                for (var r = 0; r < rows.length; r++) {
                    var inputs = rows[r].querySelectorAll('input, select, textarea');
                    inputs.forEach(function (el) {
                        var name = el.getAttribute('name');
                        if (!name) return;
                        // replace first numeric index
                        var newName = name.replace(/\[\d+\]/, '[' + r + ']');
                        el.setAttribute('name', newName);

                        // update id pattern if present (helper-style)
                        var id = el.getAttribute('id');
                        if (id) {
                            var newId = id.replace(/_\d+__/, '_' + r + '__');
                            if (newId === id) newId = id.replace(/\[\d+\]/, '[' + r + ']');
                            el.setAttribute('id', newId);
                        }
                    });
                }
            }

            function createRowHtml(fieldsHtml) {
                var tr = document.createElement('tr');
                tr.innerHTML = fieldsHtml;
                return tr;
            }

            function addTicketRow() {
                var tbody = document.querySelector('#ticketTypesTable tbody');
                var index = tbody.querySelectorAll('tr').length;
                var html = ''
                    + '<td><input class="form-control" name="TicketTypes[' + index + '].TypeName" /></td>'
                    + '<td><input class="form-control" name="TicketTypes[' + index + '].Price" type="number" step="0.01" /></td>'
                    + '<td><input class="form-control" name="TicketTypes[' + index + '].AvailableQuantity" type="number" min="0" /></td>'
                    + '<td><input class="form-control" name="TicketTypes[' + index + '].Description" /></td>'
                    + '<td><button type="button" class="btn btn-sm btn-danger remove-ticket">Remove</button></td>';
                var tr = createRowHtml(html);
                tbody.appendChild(tr);
                reindexRows('#ticketTypesTable');
            }

            function addDiscountRow() {
                var tbody = document.querySelector('#discountsTable tbody');
                var index = tbody.querySelectorAll('tr').length;
                var html = ''
                    + '<td><input class="form-control" name="Discounts[' + index + '].DiscountCode" /></td>'
                    + '<td><input class="form-control" name="Discounts[' + index + '].DiscountPercentage" type="number" step="0.01" /></td>'
                    + '<td><input class="form-control" name="Discounts[' + index + '].MaxDiscountAmount" type="number" step="0.01" /></td>'
                    + '<td><input class="form-control" name="Discounts[' + index + '].ValidFrom" type="date" /></td>'
                    + '<td><input class="form-control" name="Discounts[' + index + '].ValidTo" type="date" /></td>'
                    + '<td><button type="button" class="btn btn-sm btn-danger remove-discount">Remove</button></td>';
                var tr = createRowHtml(html);
                tbody.appendChild(tr);
                reindexRows('#discountsTable');
            }

            function onClick(e) {
                var target = e.target;
                if (!target) return;

                if (target.matches('#addTicketType')) {
                    e.preventDefault();
                    addTicketRow();
                    return;
                }

                if (target.matches('#addDiscount')) {
                    e.preventDefault();
                    addDiscountRow();
                    return;
                }

                if (target.matches('.remove-ticket')) {
                    e.preventDefault();
                    var row = target.closest('tr');
                    if (row) row.parentNode.removeChild(row);
                    reindexRows('#ticketTypesTable');
                    return;
                }

                if (target.matches('.remove-discount')) {
                    e.preventDefault();
                    var row = target.closest('tr');
                    if (row) row.parentNode.removeChild(row);
                    reindexRows('#discountsTable');
                    return;
                }
            }

            document.addEventListener('click', onClick, false);

            // Normalize any server-rendered rows on load
            document.addEventListener('DOMContentLoaded', function () {
                reindexRows('#ticketTypesTable');
                reindexRows('#discountsTable');
            });
        })();
    </script>
}